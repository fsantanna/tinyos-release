@define(FORWARD_COUNT,    1)
@define(CLIENT_COUNT,     1)
@define(SRP_MAX_PATHLEN, 10)

native  // types
    _message_t,  _nx_am_addr_t,   _sr_header_t,
    _srp_send_t, _srp_senddone_t, _srp_receive_t;

native pure
    _getSRPHeader(),
    _SourceRouteId_fetch(),
    _SourceRoutePacket_getNextHop(),
    _SourceRouteSend_getPayload();

native nohold
    _Receive_receive(),          // client is supposed not to hold
    _SourceRouteSend_cancel(),
    _SubSend_cancel(),
    _SourceRoutePacket_setRoute();

native
    _SourceRouteSend_sendDone(),
    _SubSend_send();

input void              SRP_START;
input void              SRP_STOP;
input _srp_send_t*      SRP_SEND;
input _srp_senddone_t*  SRP_SENDDONE;
input _srp_receive_t*   SRP_RECEIVE;

class Client with
    var u8 id;
do
    var u8 seqno = 0;

    loop do
        var _srp_send_t* snd =
            await SRP_SEND
                until snd:client == this.id;

        var _nx_am_addr_t[SRP_MAX_PATHLEN] nxPath;
        loop i, snd:pathLen do
            nxPath[i] = snd:path[i];
        end
        _SourceRoutePacket_setRoute(snd:msg, nxPath, snd:pathLen);

        var _sr_header_t* hdr = _getSRPHeader(snd:msg);
        hdr:payload_id = 1;
        hdr:payload_id = _SourceRouteId_fetch(this.id);
        hdr:seqno      = seqno;
        hdr:hops_left  = snd:pathLen - 2;

        seqno = seqno + 1;

        var _srp_senddone_t* done;

        loop do
            var _message_t* snd_msg = snd:msg;
            var u16 dst = _SourceRoutePacket_getNextHop(snd:msg);
            _SubSend_send(dst, snd:msg, snd:len + sizeof<_sr_header_t>)
                finalize with
                    do end; //_SubSend_cancel(snd:msg);
                end;

            // TODO
            done = await SRP_SENDDONE;
            if done:msg == snd_msg then
                break;
            end
        end

        _SourceRouteSend_sendDone(this.id, done:msg, done:error)
            finalize with
                do end; //_SourceRouteSend_cancel(done:msg);
            end;
    end
end

class Forwarder(FORWARD_COUNT) with
    var   _message_t** msg_ptr;
    var   u8           len;
do
    var _message_t buf;

    // switch buffers
    var _message_t* my = *msg_ptr;
    *msg_ptr = &buf;

    par/and do
        loop do
            _SubSend_send(_SourceRoutePacket_getNextHop(my),
                          my, this.len)
                finalize with
                    nothing; //_SubSend_cancel(my);
                end;

            var _srp_senddone_t* done = await SRP_SENDDONE;
            if done:msg == my then
                break;                  // my msg has been fwded
            end
        end
    with
        var _srp_senddone_t* done =
            await SRP_SENDDONE
                until done:msg == &buf; // my peer has been fwded
    end
end

var _message_t* msg_first = null;   // holds OS buffer

loop do
    await SRP_START;

    par/or do
        await SRP_STOP;
    with
        var Client[CLIENT_COUNT]  clients;

        loop i, CLIENT_COUNT do
            clients[i].id = i;
        end

        do  // scope of spawns
            loop do
                var _srp_receive_t* recv = await SRP_RECEIVE;
                if msg_first == null then
                    finalize
                        msg_first = *(recv:msg_ptr);    // first RECEIVE
                    with
                        nothing;    // received buffer is global (OS)
                    end
                end

                var _sr_header_t* hdr = _getSRPHeader(*(recv:msg_ptr));

                if hdr:hops_left == 0 then
                    _Receive_receive(hdr:payload_id, *(recv:msg_ptr),
                                      _SourceRouteSend_getPayload(0, *(recv:msg_ptr),
                                            recv:len - sizeof<_sr_header_t>),
                                      recv:len - sizeof<_sr_header_t>);
                else
                    hdr:hops_left = hdr:hops_left - 1;
                    var int ok = spawn Forwarder with
                        finalize
                             // *(recv:msg_ptr) is from prev "spawn"
                            this.msg_ptr = recv:msg_ptr;
                        with
                            nothing; // but he will survive until I fwd
                        end
                        this.len = recv:len;
                    end;
                    if not ok then
                        *(recv:msg_ptr) = msg_first;    // reuse OS buffer
native _LOST, _OK;
native do
    int LOST = 0;
    int OK   = 0;
end
                        _LOST = _LOST + 1;
                    else
                        _OK   = _OK + 1;
                    end
                end
            end
        end
    end
end
